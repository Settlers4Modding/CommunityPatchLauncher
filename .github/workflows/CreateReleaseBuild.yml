name: Live build

on:
  push:
    tags:
     - '*.*.*'

jobs:
   createBuild:
     name: Create release build
     runs-on: windows-latest
     steps:
       - name: Clone repository
         uses: actions/checkout@v2
         with: 
           ref: master
       - name: Get release tag
         run: echo "RELEASE_VERSION=$(($env:GITHUB_REF -split '/')[-1] -replace ' ','')" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
       - name: Check release version
         run: echo ${{ env.RELEASE_VERSION }}
       - name: Install nuget
         uses: nuget/setup-nuget@v1
       - name: Setup msbuild
         uses: microsoft/setup-msbuild@v1.0.2
       - name: Prepare version
         run: echo ${{ env.RELEASE_VERSION }} | Out-File -FilePath .\src\CommunityPatchLauncher\Version.txt -Encoding utf8
         shell: powershell
       - name: Read version.txt
         id: version-file
         uses: juliangruber/read-file-action@v1
         with:
           path: .\src\CommunityPatchLauncher\Version.txt
       - name: Show version
         run: echo ${{ steps.version-file.outputs.content }}
         shell: powershell
       - name: Build project
         run: |
           nuget restore
           msbuild /t:Build /p:Configuration=Release
         shell: powershell
       - name: Move artifact files  
         run: |
           mkdir upload-artifacts\
           mv .\src\CommunityPatchLauncher\bin\Release\** upload-artifacts\
           mv LICENSE upload-artifacts\
           mv README.md upload-artifacts\
         shell: powershell
       - name: Upload build artifact
         uses: actions/upload-artifact@v2
         with:
          name: BuildArtifact
          path: |
            upload-artifacts/
   createZip:
     name: Create zip
     needs: ["createBuild"]
     runs-on: ubuntu-latest   
     steps:
       - name: Download artifacts
         uses: actions/download-artifact@v2
         with:
           name: BuildArtifact
           path: dist
       - name: Get release tag
         run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
       - name: Create zip artifact name
         run: echo "ARTIFACT_NAME=${RELEASE_VERSION}_CommunityPatchLauncher.zip" >> $GITHUB_ENV
       - name: Check release version
         run: |
           echo $RELEASE_VERSION
           echo ${{ env.RELEASE_VERSION }}
           echo $ARTIFACT_NAME
           echo ${{ env.ARTIFACT_NAME }}
       - name: Create zip
         run: |
           cd dist/
           zip -r $ARTIFACT_NAME .
       - name: Move artifact
         run: |
           mkdir upload-artifacts/
           mv dist/* upload-artifacts/
       - name: Upload build artifact
         uses: actions/upload-artifact@v2
         with:
          name: ZipArtifact
          path: |
            upload-artifacts/
   createInstaller:
     name: Create installer
     needs: ["createBuild"]
     runs-on: windows-latest
     steps:
       - name: Clone repository
         uses: actions/checkout@v2
         with: 
           ref: master
       - name: Download artifacts
         uses: actions/download-artifact@v2
         with:
           name: BuildArtifact
           path: dist
       - name: Get release tag
         run: echo "RELEASE_VERSION=$(($env:GITHUB_REF -split '/')[-1] -replace ' ','')" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
       - name: Check release version
         run: echo ${{ env.RELEASE_VERSION }}
       - name: Create installation file
         run: |
          cd Installer
          iscc /dMyAppVersion="${{ env.RELEASE_VERSION }}" .\InstallationScript.iss
       - name: Move artifact
         run: |
           mkdir upload-artifacts/
           mv Installer/Output/* upload-artifacts/
       - name: Upload build artifact
         uses: actions/upload-artifact@v2
         with:
          name: InstallerArtifact
          path: |
            upload-artifacts/
   uploadRelease:
     name: Upload release
     needs: ["createZip", "createInstaller"]
     runs-on: ubuntu-latest
     steps:
       - name: Download artifacts
         uses: actions/download-artifact@v2
         with:
           path: dist
       - name: Get release tag
         run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
       - name: Create zip artifact name
         run: echo "ARTIFACT_NAME=${RELEASE_VERSION}_CommunityPatchLauncher.zip" >> $GITHUB_ENV
       - name: Check release version
         run: |
           echo $RELEASE_VERSION
           echo ${{ env.RELEASE_VERSION }}
           echo $ARTIFACT_NAME
           echo ${{ env.ARTIFACT_NAME }}
       - name: Create Release
         id: create_release
         uses: actions/create-release@v1
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         with:
           tag_name: ${{ github.ref }}-${{ GITHUB.RUN_NUMBER }}
           release_name: Release - Version ${{ env.RELEASE_VERSION }}
           body: Body goes here!
           draft: true
           prerelease: false
       - name: Upload CommunityPatchLauncher release artifact
         id: upload-application-release-asset-zip
         uses: actions/upload-release-asset@v1
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         with:
           upload_url: ${{ steps.create_release.outputs.upload_url }}
           asset_path: dist/ZipArtifact/${{ env.ARTIFACT_NAME }}
           asset_name: ${{ env.ARTIFACT_NAME }}
           asset_content_type: application/zip
       - name: Upload CommunityPatchLauncher release artifact
         id: upload-application-release-asset-setup
         uses: actions/upload-release-asset@v1
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         with:
           upload_url: ${{ steps.create_release.outputs.upload_url }}
           asset_path: dist/InstallerArtifact/setup-CommunityPatchLauncher-v${{ env.RELEASE_VERSION }}.exe
           asset_name: setup-CommunityPatchLauncher-v${{ env.RELEASE_VERSION }}.exe
           asset_content_type: application/octet-stream